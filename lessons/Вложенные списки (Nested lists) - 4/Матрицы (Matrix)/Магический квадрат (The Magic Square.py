n = int(input())
mtx = [input().split() for _ in range(n)]

rowSum = 0
columnSum = 0
diagMainSum = 0
diagSideSum = 0

for row in mtx:
    rowSum = sum(int(num) for num in row)

for i in range(n):
  columnSum = 0
  for j in range(n):
    columnSum += int(mtx[j][i])

diagMainSum = sum(int(mtx[i][i]) for i in range(len(mtx)))

diagSideSum = sum(int(mtx[n-j-1][j]) for j in range(n))

seq_true = ''
if len({mtx[i][j] for i in range(n) for j in range(n)}) !=n**2 or any('0' in row for row in mtx):
    seq_true = False
else:
    seq_true = True

square_find = False
if (any(str(n**2) in row for row in mtx)):
    square_find = True

if rowSum == columnSum == diagMainSum == diagSideSum and seq_true == square_find == True:
  print('YES')
else:
  print('NO')

'''
def is_magic_square(n, matrix):
  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
  correct_nums = list(range(1, n ** 2 + 1))

  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –Ω–∞—à–µ–π –º–∞—Ç—Ä–∏—Ü—ã
  our_nums = []
  for row in matrix:
      our_nums.extend(row)

  # –µ—Å–ª–∏ —ç—Ç–∏ —Å–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã, –∑–Ω–∞—á–∏—Ç –Ω–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n ** 2
  # –∑–Ω–∞—á–∏—Ç, –º—ã —Å—Ä–∞–∑—É –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å "NO" –∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  our_nums.sort()
  if our_nums != correct_nums:
      return "NO"

  # –≤ —Å–∞–º–æ–π –º–∞—Ç—Ä–∏—Ü–µ –º—ã —É–∂–µ —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —Ä—è–¥—ã (—Å—Ç—Ä–æ–∫–∏)
  rows = matrix.copy()

  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
  columns = []
  for j in range(n):
      cur_column = []
      for i in range(n):
          cur_column.append(matrix[i][j])

      columns.append(cur_column)

  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π (—Å –¥–≤—É–º—è –ø—É—Å—Ç—ã–º–∏ –ø–æ–¥—Å–ø–∏—Å–∫–∞–º–∏)
  diagonals = [[], []]
  for i in range(n):
      diagonals[0].append(matrix[i][i])
      diagonals[1].append(matrix[i][n - 1 - i])

  # —Å–æ–µ–¥–∏–Ω—è–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
  all_lines = rows + columns + diagonals

  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö "–ª–∏–Ω–∏–π"
  # –∑–∞ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—å–º—ë–º —Å—É–º–º—É –ø–µ—Ä–≤–æ–π "–ª–∏–Ω–∏–∏"
  max_sum = sum(all_lines[0])
  min_sum = sum(all_lines[0])
  for line in all_lines:
      max_sum = max(max_sum, sum(line))
      min_sum = min(min_sum, sum(line))

  # —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—ã
  # –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã, —Ç.–∫. –≤—Å–µ —Å—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã
  if max_sum != min_sum:
      return "NO"

  return "YES"

n = int(input())
matrix = [[int(el) for el in input().split()] for _ in range(n)]

print(is_magic_square(n, matrix))



def magic_square():

    cols = int(input())
    matrix = []
    sum_main_diag = 0
    sum_semi_diag = 0
    check = []

    for i in range(cols):                                # –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
        elem = [int(num) for num in input().split()]
        matrix.append(elem)

    for i in range(cols):                                # –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Ç—Ä–∏—Ü—ã
        check += matrix[i]

    for i in range(1, len(check) + 1):                   # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ n ** 2
        if i not in check:
            return print("NO")                           # –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ —á–∏—Å–ª–∞, —Ç–æ –∑–Ω–∞—á–∏—Ç –¥–∞–ª—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å NO

    for i in range(cols):                                # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
        sum_main_diag += matrix[i][i]
        sum_semi_diag += matrix[i][cols - 1 - i]

    for i in range(cols):                                # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
        sum_cols = 0
        sum_rows = 0
        for j in range(cols):
            sum_cols += matrix[i][j]
            sum_rows += matrix[j][i]
        if not sum_cols == sum_rows == sum_main_diag == sum_semi_diag:
            return print("NO")                           # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–≤–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å NO
    else:
        return print("YES")                              # –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å YES


magic_square()



def sum_matrix(n, total, matrix):
    total += sum(matrix[i][j] for j in range(n) for i in range(n)) # —Å—É–º–º–∞ —Å—Ç—Ä–æ–∫
    total += sum(matrix[j][i] for j in range(n) for i in range(n)) # —Å—É–º–º–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    total += sum(matrix[i][i] for i in range(n)) # —Å—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    total += sum(matrix[i][n-i-1] for i in range(n)) # —Å—É–º–º–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    return total

n = int(input())
matrix = [list(map(int, input().split())) for i in range(n)]
total = 0
total = sum_matrix(n, total, matrix) / (n + n + 2) # —Å—É–º–º–∞ –º–∞—Ç—Ä–∏—Ü—ã –¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤, —Å—Ç—Ä–æ–∫ –∏ –¥–∏–∞–≥
flag = False
l = [matrix[i][j] for j in range(n) for i in range(n)]
l.sort()
if l == [i for i in range(1, n ** 2 + 1)]:
    flag = True
print('YES' if total == sum(matrix[-1]) and flag == True else 'NO')



n = int(input()); m = []; b=[]
for i in range(n):
    a = [int(j) for j in input().split()]
    m.append(a)
    b += a
t = 'YES'    
if sorted(b) != list(range(1, n**2 + 1)): t = 'NO' 
mm = [[m[i][j] for i in range(n)] for j in range(n)]
s = sum(m[0])
for i in range(n):
    if sum(m[i]) != s or sum(mm[i]) != s:
        t = 'NO'
        break
print(t)



n = int(input())
a = [[*map(int, input().split())] for _ in range(n)]
k = n * (1 + n ** 2) // 2                                                      # –º–∞–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
print(('NO', 'YES')[all(sum(e) == k for x in (((a[i][i] for i in range(n)),    # –≥–ª–∞–≤. –¥–∏–∞–≥–æ–Ω–∞–ª—å
                                               (a[i][~i] for i in range(n))),  # –≤—Ç–æ—Ä. –¥–∏–∞–≥–æ–Ω–∞–ª—å
                                               a,                              # —Å—Ç—Ä–æ–∫–∏
                                               zip(*a))                        # —Å—Ç–æ–ª–±—Ü—ã
                                               for e in x)           
                                               and
                    set(sum(a, [])) == set(range(1, n ** 2 + 1))               # –Ω–∞—Ç—É—Ä. —Ä—è–¥ –¥–æ n^2.          
                   ])



n = int(input())
a = [[*map(int, input().split())] for _ in range(n)]
k = n * (1 + n ** 2) // 2  # –º–∞–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
print('YES' if all(sum(x) == k for x in (*a, *zip(*a), [a[i][i] for i in range(n)], [a[i][~i] for i in range(n)])) else 'NO')



import numpy as np
n = int(input())
a = [list(map(int, input().split())) for _ in range(n)]
v = {*np.sum(a, axis=1), *np.sum(a, axis=0), sum(np.diag(a)), sum(np.fliplr(a).diagonal())}
if len(v) == 1:
    print('YES')
else:
    print('NO')



import numpy as np
n = int(input())
data = np.array([input().split() for _ in range(n)]).astype(int)
uniq_sums = set([*np.sum(data, axis = 0), *np.sum(data, axis = 1),
                     sum(np.diag(data)), sum(np.diag(np.fliplr(data)))])
print("YES" if len(uniq_sums) == 1 and \
      np.all(np.sort(data.flatten()) == np.arange(n * n) + 1)
      else "NO")


n = int(input()) # –≤–≤–æ–¥
matrix = [] # –ø—É—Å—Ç–∞—è –º–∞—Ç—Ä–∏—Ü–∞
for _ in range(n): # –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
#  matrix.append(list(map(int, input().split())))
  tmp = [int(x) for x in input().split()]
  matrix.append(tmp)
# digits = list(range(1, n ** 2 + 1)) # —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n ** 2)
digits = [i for i in range(1, n**2 + 1)] # —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n^2 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)

d1, d2 = 0, 0 # –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
for i in range(n): # –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  stolb_sum, stroka_sum = 0, 0 # –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
  for j in range(n):
    stolb_sum += matrix[j][i] # —Å—É–º–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    stroka_sum += matrix[i][j] # —Å—É–º–º—ã —Å—Ç—Ä–æ–∫
    if matrix[i][j] in digits: # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª (–ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞) —ç–ª–µ–º–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
      digits.remove(matrix[i][j])
  d1 += matrix[i][i] # —Å—É–º–º–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
  d2 += matrix[i][n-i-1] #—Å—É–º–º–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
  if stolb_sum != stroka_sum: # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫
    break

if stolb_sum == stroka_sum == d1 == d2 and digits == []: # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–º–∞–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ü§£)
  print('YES')
else:
  print('NO')
'''